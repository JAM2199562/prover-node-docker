name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Force push to registry'
        required: false
        default: 'false'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/zkwasm

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test container functionality
      run: |
        echo "Testing container..."
        
        # Get the first tag for testing
        IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # Test 1: Check if container starts without errors
        echo "Test 1: Container startup test"
        timeout 30s docker run --rm --entrypoint="/bin/bash" "$IMAGE_TAG" -c "echo 'Container starts successfully'" || {
          echo "‚ùå Container startup failed"
          exit 1
        }
        
        # Test 2: Check if zkwasm binary exists
        echo "Test 2: Binary existence test"
        docker run --rm --entrypoint="/bin/bash" "$IMAGE_TAG" -c "ls -la /home/zkwasm/prover-node-release/zkwasm-playground" || {
          echo "‚ùå zkwasm-playground binary not found"
          exit 1
        }
        
        # Test 3: Check if configuration files exist
        echo "Test 3: Configuration files test"
        docker run --rm --entrypoint="/bin/bash" "$IMAGE_TAG" -c "test -f /home/zkwasm/prover-node-release/prover_config.json && echo 'Config file exists'" || {
          echo "‚ùå Configuration file missing"
          exit 1
        }
        
        # Test 4: Check if smart entrypoint script exists
        echo "Test 4: Smart entrypoint script test"
        docker run --rm --entrypoint="/bin/bash" "$IMAGE_TAG" -c "test -x /home/zkwasm/smart_entrypoint.sh && echo 'Smart entrypoint exists'" || {
          echo "‚ùå Smart entrypoint script missing"
          exit 1
        }
        
        # Test 5: Check workspace directory structure
        echo "Test 5: Workspace structure test"
        docker run --rm --entrypoint="/bin/bash" "$IMAGE_TAG" -c "ls -la /home/zkwasm/prover-node-release/workspace/static/"
        
        echo "‚úÖ All tests passed!"

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        platforms: linux/amd64

    - name: Display image information
      if: github.event_name != 'pull_request'
      run: |
        echo "## üöÄ Docker Image Built and Pushed Successfully!"
        echo ""
        echo "**Image Tags:**"
        echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- /'
        echo ""
        echo "**Deployment Options:**"
        echo ""
        echo "**Option A: With SSH access (port 2222):**"
        echo "\`\`\`bash"
        echo "docker run -d --gpus all \\"
        echo "    -e FTP_SERVER_IP=\"YOUR_FTP_SERVER_IP\" \\"
        echo "    -p 2222:22 \\"
        echo "    --name zkwasm-prover \\"
        echo "    ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "\`\`\`"
        echo ""
        echo "**Option B: No SSH (simpler, use docker exec):**"
        echo "\`\`\`bash"
        echo "docker run -d --gpus all \\"
        echo "    -e FTP_SERVER_IP=\"YOUR_FTP_SERVER_IP\" \\"
        echo "    --name zkwasm-prover \\"
        echo "    ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "\`\`\`"
        echo ""
        echo "**Key features:**"
        echo "- ‚úÖ External FTP server support"
        echo "- ‚úÖ Configurable FTP server IP"
        echo "- ‚úÖ Smart configuration checking"
        echo "- ‚úÖ Automated parameter file download"
        echo "- ‚úÖ Port conflict avoidance" 